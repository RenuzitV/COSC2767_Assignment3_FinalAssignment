AWSTemplateFormatVersion: "2010-09-09"
Description: "This is a template for launching a EC2 Instance that host a RMITStore Server"
Resources:
  JenkinsEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0ed9277fb7eb570c9
      InstanceType: t2.micro
      KeyName: devops_project_key
      SecurityGroupIds:
        - JenkinsSecurityGroup
      Tags:
        - Key: Name
          Value: RMIT_Store_Jenkins
      Monitoring: true
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash

          echo "sudo su -" >> /home/ec2-user/.bashrc
          public_ipv4=$(curl -s http://checkip.amazonaws.com/)

          sudo su -

          echo '
          #!/bin/bash

          # Check if cicd_testing_pipeline_full_proj/ exists
          if [ -d "cicd_testing_pipeline_full_proj" ]; then
              echo "Removing cicd_testing_pipeline_full_proj/..."
              rm -rf cicd_testing_pipeline_full_proj/
              echo "cicd_testing_pipeline_full_proj/ removed."
          fi

          git clone https://github.com/KhaEricTran/cicd_testing_pipeline_full_proj.git

          # Navigate to the cicd_testing_pipeline_full_proj directory
          cd ~/cicd_testing_pipeline_full_proj/utilities

          # Find all Bash script files and make them executable
          find . -type f -name "*.sh" -exec chmod +x {} \;

          echo "Bash script files in assignment-3 directory made executable."
          cd ~

          # Install Java OpenJDK 11, required dependenciess for the jenkins package
          # Check if Java is already installed
          if command -v java &> /dev/null || type -p java; then
            echo "Java is already installed, skipping..."
          else
            echo "Installing Java OpenJDK 11..."
            sudo amazon-linux-extras install java-openjdk11 -y
          fi

          # Setup Maven
          source /root/cicd_testing_pipeline_full_proj/utilities/maven/maven_install.sh

          # Source .bashrc to apply changes
          source ~/.bashrc
          ' >> /root/init_repo.sh

          chmod +x /root/init_repo.sh

          # Install Git
          sudo yum install git -y

          ########## Jenkins Setup ##########

          public_ipv4=$(curl -s http://checkip.amazonaws.com/)
          # Import the repository of Jenkins
          sudo wget -O /etc/yum.repos.d/jenkins.repo \
              https://pkg.jenkins.io/redhat-stable/jenkins.repo
          sudo rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io-2023.key

          # Update yum
          sudo yum package -y

          # Add required dependencies for the jenkins package
          sudo yum install fontconfig -y
          sudo amazon-linux-extras install java-openjdk11 -y
          sudo yum install jenkins -y

          sudo systemctl daemon-reload

          echo "Installing docker..."
          sudo yum install docker -y
          # Add group membership for the default ec2-user
          # so you can run all docker commands without using the sudo command

          # Prepare permission for Docker
          sudo usermod -a -G docker ec2-user
          # Run subsequent commands in the current shell without using newgrp
          (
            # Enable docker service at AMI boot time and start docker service
            sudo systemctl enable --now docker.service
            sudo systemctl start docker.service
            service docker status
          )

          # Change hostname
          rm -f /etc/hostname
          echo "jenkins_server" >> /etc/hostname

          # Add ansible admin to sudoer
          sudo useradd ansibleadmin
          sudo passwd -d ansibleadmin

          sudo usermod -aG docker ansibleadmin
          echo "ansibleadmin ALL=(ALL) NOPASSWD: ALL" | sudo tee -a /etc/sudoers
          sudo sed -i 's/^#\?PasswordAuthentication.*/PasswordAuthentication yes/' /etc/ssh/sshd_config

          echo '
          sudo systemctl enable jenkins
          sudo systemctl start jenkins
          cat /var/lib/jenkins/secrets/initialAdminPassword
          echo "Server is running at http://$(curl -s http://checkip.amazonaws.com/):8080"
          ' >> /root/.bashrc

          service sshd reload

          ########## Pytest Setup ##########

          # Install Google Chrome Binary for Linux
          sudo yum install -y liberation-fonts
          sudo yum install -y https://dl.google.com/linux/direct/google-chrome-stable_current_x86_64.rpm
          echo "google-chrome --version" >> /root/.bashrc

          # Install ChromeDriver Binary for Linux
          sudo yum install -y unzip
          wget https://chromedriver.storage.googleapis.com/98.0.4758.102/chromedriver_linux64.zip
          sudo unzip chromedriver_linux64.zip
          sudo mv chromedriver /usr/bin/chromedriver
          echo "chromedriver --version" >>/root/.bashrc

          # Install Python packages
          sudo pip3 install virtualenv
          pip3 install faker
          pip3 install selenium
          pip3 install pytest
          pip3 install urllib3==1.26.8
          pip3 install webdriver_manager

          reboot

  AnsibleEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0ed9277fb7eb570c9
      InstanceType: t2.micro
      KeyName: devops_project_key
      SecurityGroupIds:
        - AnsibleSecurityGroup
      Tags:
        - Key: Name
          Value: TestRMIT-Store_Ansible
      Monitoring: true
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash

          echo "sudo su -" >> /home/ec2-user/.bashrc
          public_ipv4=$(curl -s http://checkip.amazonaws.com/)

          sudo su -

          echo "source /root/init_repo.sh" >> /root/.bashrc
          echo "cd cicd_testing_pipeline_full_proj/" >> /root/.bashrc

          echo '
          #!/bin/bash

          # Check if cicd_testing_pipeline_full_proj/ exists
          if [ -d "cicd_testing_pipeline_full_proj" ]; then
              echo "Removing cicd_testing_pipeline_full_proj/..."
              rm -rf cicd_testing_pipeline_full_proj/
              echo "cicd_testing_pipeline_full_proj/ removed."
          fi

          git clone https://github.com/KhaEricTran/cicd_testing_pipeline_full_proj.git

          sudo cp /root/cicd_testing_pipeline_full_proj/utilities/ansible/apachePlaybook.yml /root/ --force
          sudo cp /root/cicd_testing_pipeline_full_proj/utilities/ansible/kubectlPlaybook.yml /root/ --force

          # Navigate to the cicd_testing_pipeline_full_proj directory
          cd ~/cicd_testing_pipeline_full_proj/utilities

          # Find all Bash script files and make them executable
          find . -type f -name "*.sh" -exec chmod +x {} \;

          echo "Bash script files in assignment-3 directory made executable."
          cd ~
          ' >> /root/init_repo.sh

          chmod +x /root/init_repo.sh

          # Install Git
          sudo yum install git -y

          ########## Ansible Setup ##########

          # Install Ansible
          sudo amazon-linux-extras install ansible2 -y

          # Change hostname
          rm -f /etc/hostname
          echo "ansible_server" >> /etc/hostname

          # Add ansible admin to sudoer
          sudo useradd ansibleadmin
          sudo passwd -d ansibleadmin

          # Set a new password
          echo "ansibleadmin:ansibleadmin" | sudo chpasswd

          echo "ansibleadmin ALL=(ALL) NOPASSWD: ALL" | sudo tee -a /etc/sudoers
          sudo sed -i 's/^#\?PasswordAuthentication.*/PasswordAuthentication yes/' /etc/ssh/sshd_config

          service sshd reload

          reboot

  RMITStoreDatabaseEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0ed9277fb7eb570c9
      InstanceType: t2.micro
      KeyName: devops_project_key
      SecurityGroupIds:
        - JenkinsSecurityGroup
      Tags:
        - Key: Name
          Value: TestRMIT-Store_DB
      Monitoring: true
      UserData:
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash

          echo "sudo su -" >> /home/ec2-user/.bashrc
          public_ipv4=$(curl -s http://checkip.amazonaws.com/)

          sudo su -

          echo "source /root/init_repo.sh" >> /root/.bashrc
          echo "cd cicd_testing_pipeline_full_proj/" >> /root/.bashrc

          echo '
          #!/bin/bash

          # Check if cicd_testing_pipeline_full_proj/ exists
          if [ -d "cicd_testing_pipeline_full_proj" ]; then
              echo "Removing cicd_testing_pipeline_full_proj/..."
              rm -rf cicd_testing_pipeline_full_proj/
              echo "cicd_testing_pipeline_full_proj/ removed."
          fi

          git clone https://github.com/KhaEricTran/cicd_testing_pipeline_full_proj.git

          # Navigate to the cicd_testing_pipeline_full_proj directory
          cd ~/cicd_testing_pipeline_full_proj/utilities

          # Find all Bash script files and make them executable
          find . -type f -name "*.sh" -exec chmod +x {} \;

          echo "Bash script files in assignment-3 directory made executable."
          cd ~
          ' >> /root/init_repo.sh

          chmod +x /root/init_repo.sh

          # Install Git
          sudo yum install git -y

          ########## Database Setup ##########

          # Install MariaDB Server
          sudo yum install -y mariadb-server
          sudo service mariadb start
          sudo systemctl enable mariadb

          # Change hostname
          rm -f /etc/hostname
          echo "db_server" >> /etc/hostname

          service sshd reload

          reboot

  RMITStoreEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0ed9277fb7eb570c9
      InstanceType: t2.micro
      KeyName: devops_project_key
      SecurityGroupIds:
        - JenkinsSecurityGroup
      Tags:
        - Key: Name
          Value: TestRMIT-Store
      Monitoring: true
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash

          echo "sudo su -" >> /home/ec2-user/.bashrc
          public_ipv4=$(curl -s http://checkip.amazonaws.com/)

          sudo su -

          echo '
          source /root/init_repo.sh
          kill $(lsof -t -i tcp:80)
          docker stop my-rmit-store
          docker container prune -f
          docker run -d --name my-rmit-store -p 80:80 3750945/rmitstore
          echo "Server is running at http://$(curl -s http://checkip.amazonaws.com/)"
          ' >> /root/.bashrc
          echo "cd cicd_testing_pipeline_full_proj/" >> /root/.bashrc

          echo '
          #!/bin/bash

          # Check if cicd_testing_pipeline_full_proj/ exists
          if [ -d "cicd_testing_pipeline_full_proj" ]; then
              echo "Removing cicd_testing_pipeline_full_proj/..."
              rm -rf cicd_testing_pipeline_full_proj/
              echo "cicd_testing_pipeline_full_proj/ removed."
          fi

          git clone https://github.com/KhaEricTran/cicd_testing_pipeline_full_proj.git

          # Navigate to the cicd_testing_pipeline_full_proj directory
          cd ~/cicd_testing_pipeline_full_proj/utilities

          # Find all Bash script files and make them executable
          find . -type f -name "*.sh" -exec chmod +x {} \;

          echo "Bash script files in assignment-3 directory made executable."
          cd ~
          ' >> /root/init_repo.sh

          chmod +x /root/init_repo.sh

          # Install Git
          sudo yum install git -y

          ########## Apache Setup ##########

          # Install PHP and php-mysql module
          sudo yum install -y php php-mysql

          # Install Apache server
          sudo yum install -y httpd
          sudo service httpd start
          sudo systemctl enable httpd

          echo "Installing docker..."
          sudo yum install docker -y
          # Add group membership for the default ec2-user
          # so you can run all docker commands without using the sudo command

          # Prepare permission for Docker
          sudo usermod -a -G docker ec2-user
          # Run subsequent commands in the current shell without using newgrp
          (
            # Enable docker service at AMI boot time and start docker service
            sudo systemctl enable --now docker.service
            sudo systemctl start docker.service
            service docker status
          )

          # Run my prepared Docker Image
          docker run -d --name my-rmit-store -p 80:80 3750945/rmitstore

          # Change hostname
          rm -f /etc/hostname
          echo "dev_server" >> /etc/hostname

          ########## ansibleadmin Setup ##########

          # Add ansibleadmin user
          sudo useradd ansibleadmin

          # Delete the current password (if any)
          sudo passwd -d ansibleadmin

          # Set a new password for ansibleadmin
          echo "ansibleadmin:ansibleadmin" | sudo chpasswd

          sudo usermod -aG docker ansibleadmin
          echo "ansibleadmin ALL=(ALL) NOPASSWD: ALL" | sudo tee -a /etc/sudoers
          sudo sed -i 's/^#\?PasswordAuthentication.*/PasswordAuthentication yes/' /etc/ssh/sshd_config

          service sshd reload

          cp /root/cicd_testing_pipeline_full_proj/utilities/Dockerfile /home/ansibleadmin/

          reboot

  KubectlEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0005e0cfe09cc9050
      InstanceType: t2.micro
      IamInstanceProfile: LabInstanceProfile
      KeyName: devops_project_key
      SecurityGroupIds:
        - JenkinsSecurityGroup
      Tags:
        - Key: Name
          Value: Rmit_Store_Kubectl
      Monitoring: true
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash

          echo "sudo su -" >> /home/ec2-user/.bashrc
          public_ipv4=$(curl -s http://checkip.amazonaws.com/)

          sudo su -

          # Change hostname
          rm -f /etc/hostname
          echo "dev_server" >> /etc/hostname

          # Setup Kubectl
          curl -O https://s3.us-west-2.amazonaws.com/amazon-eks/1.28.3/2023-11-14/bin/linux/amd64/kubectl
          chmod +x ./kubectl
          mkdir -p $HOME/bin && cp ./kubectl $HOME/bin/kubectl && export PATH=$PATH:$HOME/bin
          echo 'export PATH=$PATH:$HOME/bin' >> ~/.bashrc
          curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
          sudo mv /tmp/eksctl /usr/local/bin
          aws eks update-kubeconfig --name eks-tutorial-cluster --region us-east-1

          echo '
          #!/bin/bash

          # Check if cicd_testing_pipeline_full_proj/ exists
          if [ -d "cicd_testing_pipeline_full_proj" ]; then
              echo "Removing cicd_testing_pipeline_full_proj/..."
              rm -rf cicd_testing_pipeline_full_proj/
              echo "cicd_testing_pipeline_full_proj/ removed."
          fi 

          git clone https://github.com/KhaEricTran/cicd_testing_pipeline_full_proj.git

          # Install tree command to show the directory tree of the pulled repository
          sudo yum install tree -y
          tree ~/cicd_testing_pipeline_full_proj/

          # Navigate to the cicd_testing_pipeline_full_proj directory
          cd ~/cicd_testing_pipeline_full_proj/utilities

          # Find all Bash script files and make them executable
          find . -type f -name "*.sh" -exec chmod +x {} \;

          echo "Bash script files in assignment-3 directory made executable."

          # Source .bashrc to apply changes
          source ~/.bashrc
          ' >> /root/init_repo.sh

          chmod +x /root/init_repo.sh

          #Connect Kubectl to workers
          echo '
          #!/bin/bash
          read -p "Cluster name: " clusterName
          read -p "Region: " region
          aws eks update-kubeconfig --name $clusterName --region $region
          ' >> /root/connect-workers.sh
          chmod +x connect-workers.sh

          # Install Git
          sudo yum install git -y        

  JenkinsEIP:
    Type: AWS::EC2::EIP
    Properties: {}

  JenkinsEIPAssociation:
    Type: AWS::EC2::EIPAssociation
    Properties:
      AllocationId: !GetAtt JenkinsEIP.AllocationId
      InstanceId: !Ref JenkinsEC2Instance        

  RMITStoreEIP:
    Type: AWS::EC2::EIP
    Properties: {}

  RMITStoreEIPAssociation:
    Type: AWS::EC2::EIPAssociation
    Properties:
      AllocationId: !GetAtt RMITStoreEIP.AllocationId
      InstanceId: !Ref RMITStoreEC2Instance

  RMITStoreRecoveryAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription:
        Trigger a recovery when instance status check fails for 15
        consecutive minutes.
      Namespace: AWS/EC2
      MetricName: StatusCheckFailed_System
      Statistic: Minimum
      Period: "60"
      EvaluationPeriods: "15"
      ComparisonOperator: GreaterThanThreshold
      Threshold: "0"
      AlarmActions: [!Sub "arn:aws:automate:${AWS::Region}:ec2:recover"]
      Dimensions:
        - Name: InstanceId
          Value: !Ref RMITStoreEC2Instance
        - Name: InstanceId
          Value: !Ref RMITStoreEC2Instance

Outputs:
  ElasticIP:
    Description: Elastic IP Value
    Value: !Ref RMITStoreEIP

